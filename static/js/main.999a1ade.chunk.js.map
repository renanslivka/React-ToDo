{"version":3,"sources":["component/ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","text","value","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","particlesOptions","particles","number","density","enable","value_area","App","state","currentItem","handelInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","params","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUAgCeA,MA5Bf,SAAmBC,GAClB,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAC3B,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAChC,2BACC,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKK,KAAMC,MAASN,EAAKK,KAC9CE,SACC,SAACC,GAAD,OAAOZ,EAAMa,UAAUD,EAAEE,OAAOJ,MAAON,EAAKE,QAE/C,8BACC,4BAAQD,UAAU,mBAAmBG,GAAG,QAAQO,KAAK,QACpDC,QAAW,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAM7C,OACC,6BACC,kBAAC,IAAD,CAAUY,SAAW,IAAKC,OAAO,eAC/BlB,K,gBCpBCmB,EAAmB,CACvBC,UAAW,CACTC,OAAO,CACLZ,MAAM,GACNa,QAAQ,CACNC,QAAO,EACPC,WAAW,QAwFJC,E,YAhFb,WAAY1B,GAAO,IAAD,8BACd,4CAAMA,KACD2B,MAAQ,CACXzB,MAAQ,GACR0B,YAAY,CACVnB,KAAK,GACLH,IAAI,KAGN,EAAKuB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKb,WAAa,EAAKA,WAAWa,KAAhB,gBAClB,EAAKjB,UAAY,EAAKA,UAAUiB,KAAf,gBAZL,E,yEAeNlB,GACVoB,KAAKC,SAAS,CACZL,YAAY,CACVnB,KAAKG,EAAEE,OAAOJ,MACdJ,IAAI4B,KAAKC,W,8BAKPvB,GACNA,EAAEwB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAE3B,GADAU,QAAQC,IAAIF,GACQ,KAAhBA,EAAQ5B,KAAY,CACtB,IAAM+B,EAAQ,sBAAOR,KAAKL,MAAMzB,OAAlB,CAAwBmC,IACtCL,KAAKC,SAAS,CACZ/B,MAAMsC,EACNZ,YAAY,CACVnB,KAAK,GACLH,IAAI,S,iCAKDA,GACT,IAAMmC,EAAgBT,KAAKL,MAAMzB,MAAMwC,QAAO,SAAAtC,GAAI,OAAIA,EAAKE,MAAQA,KACnE0B,KAAKC,SAAS,CACZ/B,MAAOuC,M,gCAIDhC,EAAKH,GACb,IAAMJ,EAAQ8B,KAAKL,MAAMzB,MACzBA,EAAMC,KAAI,SAAAC,GACJA,EAAKE,MAAQA,IACfF,EAAKK,KAAOA,MAGhBuB,KAAKC,SAAS,CACZ/B,MAAQA,M,+BAKR,OACA,yBAAKG,UAAU,OACf,kBAAC,IAAD,CAAWA,UAAU,YACbsC,OAAQvB,IAEd,gCACA,0BAAMZ,GAAG,aAAaoC,SAAUZ,KAAKD,SACnC,2BAAOxB,KAAK,OAAOsC,YAAY,aAC/BnC,MAAOsB,KAAKL,MAAMC,YAAYnB,KAC9BE,SAAUqB,KAAKH,cACf,4BAAQtB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAWL,MAAO8B,KAAKL,MAAMzB,MAC3Be,WAAce,KAAKf,WACnBJ,UAAamB,KAAKnB,iB,GA5ERiC,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.999a1ade.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props) {\r\n\tconst items = props.items;\r\n\tconst listItems = items.map(item=>{\r\n\t\treturn(\r\n\t\t\t <div className=\"list\" key={item.key}>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<input type=\"text\" id={item.text} value = {item.text}\r\n\t\t\t\t\t \tonChange= {\r\n\t\t\t\t\t \t\t(e) => props.setUpdate(e.target.value, item.key)\r\n\t\t\t\t\t \t}/>\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t<button className='fas fa-trash-alt' id=\"trash\" icon=\"trash\"\r\n\t\t\t\t\t\t\tonClick = {() => props.deleteItem(item.key)}/>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t})\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<FlipMove duration= {300} easing=\"ease-in-out\">\r\n\t\t\t\t{listItems}\r\n\t\t\t</FlipMove>\r\n\t\t</div>\r\n\t)\r\n\t\t\r\n}\r\n\r\nexport default ListItems;","import React,{Component} from 'react';\nimport './App.css';\nimport ListItems from './component/ListItems.js';\nimport Particles from 'react-particles-js';\n\nconst particlesOptions = {\n  particles: {\n    number:{\n      value:30,\n      density:{\n        enable:true,\n        value_area:100\n      }\n    }\n  }\n}\n\nclass App extends Component{\n\n  constructor(props){\n      super(props)\n      this.state = {          \n        items : [],\n        currentItem:{\n          text:'',\n          key:''\n        }\n      }\n        this.handelInput = this.handelInput.bind(this);\n        this.addItem = this.addItem.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n        this.setUpdate = this.setUpdate.bind(this);\n    }\n\n  handelInput(e){\n    this.setState({\n      currentItem:{\n        text:e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if (newItem.text !==\"\") {\n      const newItems = [...this.state.items,newItem];\n      this.setState({\n        items:newItems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      });\n    }\n  }\n  deleteItem(key){\n    const filteredItems = this.state.items.filter(item => item.key !== key);\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n  setUpdate(text,key){\n    const items = this.state.items;\n    items.map(item=> {\n      if (item.key === key) {\n        item.text = text;\n      }\n    })\n    this.setState({\n      items : items\n    })\n  }\n\n  render(){\n      return (\n      <div className=\"App\">\n      <Particles className=\"particles\"\n              params={particlesOptions}\n            />\n        <header>\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input type=\"text\" placeholder=\"Enter Task\"\n          value={this.state.currentItem.text}\n          onChange={this.handelInput}/>\n          <button type=\"submit\">Add</button>\n        </form>\n      </header>\n      <ListItems items={this.state.items}\n        deleteItem = {this.deleteItem}\n        setUpdate = {this.setUpdate}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}