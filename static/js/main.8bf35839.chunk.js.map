{"version":3,"sources":["component/ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","text","value","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","particlesOptions","particles","number","density","enable","value_area","App","handelInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","console","log","newItems","filteredItems","filter","bind","params","onSubmit","this","placeholder","finishItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUAIe,SAASA,EAAUC,GAChC,IAEMC,EAFQD,EAAME,MAEIC,KAAI,SAAAC,GAC1B,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC9B,2BACE,2BAAOC,KAAK,WAAWF,UAAU,cACjC,2BACEA,UAAU,OACVE,KAAK,OACLC,GAAIJ,EAAKK,KACTC,MAAON,EAAKK,KACZE,SAAU,SAAAC,GAAC,OAAIZ,EAAMa,UAAUD,EAAEE,OAAOJ,MAAON,EAAKE,QAEtD,8BACE,4BACED,UAAU,mBACVG,GAAG,QACHO,KAAK,QACLC,QAAS,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAOjD,OACE,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC7BlB,G,oBC5BDmB,EAAmB,CACvBC,UAAW,CACTC,OAAQ,CACNZ,MAAO,GACPa,QAAS,CACPC,QAAQ,EACRC,WAAY,QA4FLC,E,YArFb,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KAcR2B,YAAc,SAAAf,GACZ,EAAKgB,SAAS,CACZC,YAAa,CACXpB,KAAMG,EAAEE,OAAOJ,MACfJ,IAAKwB,KAAKC,UAnBG,EAwBnBC,QAAU,SAAApB,GACRA,EAAEqB,iBACF,IAAMC,EAAU,EAAKC,MAAMN,YAE3B,GADAO,QAAQC,IAAIH,GACS,KAAjBA,EAAQzB,KAAa,CACvB,IAAM6B,EAAQ,sBAAO,EAAKH,MAAMjC,OAAlB,CAAyBgC,IACvC,EAAKN,SAAS,CACZ1B,MAAOoC,EACPT,YAAa,CACXpB,KAAM,GACNH,IAAK,QAlCM,EAwCnBW,WAAa,SAAAX,GACX,IAAMiC,EAAgB,EAAKJ,MAAMjC,MAAMsC,QAAO,SAAApC,GAAI,OAAIA,EAAKE,MAAQA,KACnE,EAAKsB,SAAS,CACZ1B,MAAOqC,KA3CQ,EA+CnB1B,UAAY,SAACJ,EAAMH,GACjB,IAAMJ,EAAQ,EAAKiC,MAAMjC,MACzBA,EAAMC,KAAI,SAAAC,GACJA,EAAKE,MAAQA,IACfF,EAAKK,KAAOA,MAGhB,EAAKmB,SAAS,CACZ1B,MAAOA,KArDT,EAAKiC,MAAQ,CACXjC,MAAO,GACP2B,YAAa,CACXpB,KAAM,GACNH,IAAK,KAGT,EAAKqB,YAAc,EAAKA,YAAYc,KAAjB,gBACnB,EAAKT,QAAU,EAAKA,QAAQS,KAAb,gBACf,EAAKxB,WAAa,EAAKA,WAAWwB,KAAhB,gBAClB,EAAK5B,UAAY,EAAKA,UAAU4B,KAAf,gBAZA,E,sEA4DjB,OACE,yBAAKpC,UAAU,OACb,kBAAC,IAAD,CAAWA,UAAU,YAAYqC,OAAQtB,IACzC,gCACE,0BAAMZ,GAAG,aAAamC,SAAUC,KAAKZ,SACnC,2BACEzB,KAAK,OACLsC,YAAY,aACZnC,MAAOkC,KAAKT,MAAMN,YAAYpB,KAC9BE,SAAUiC,KAAKjB,cAEjB,4BAAQpB,KAAK,SAASF,UAAU,mBAGpC,kBAAC,EAAD,CACEH,MAAO0C,KAAKT,MAAMjC,MAClBe,WAAY2B,KAAK3B,WACjBJ,UAAW+B,KAAK/B,UAChBiC,WAAYF,KAAKE,kB,GA/ETC,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8bf35839.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ListItems.css\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nexport default function ListItems(props) {\r\n  const items = props.items;\r\n\r\n  const listItems = items.map(item => {\r\n    return (\r\n      <div className=\"list\" key={item.key}>\r\n        <p>\r\n          <input type=\"checkbox\" className=\"checkmark\" />\r\n          <input\r\n            className=\"text\"\r\n            type=\"text\"\r\n            id={item.text}\r\n            value={item.text}\r\n            onChange={e => props.setUpdate(e.target.value, item.key)}\r\n          />\r\n          <span>\r\n            <button\r\n              className=\"fas fa-trash-alt\"\r\n              id=\"trash\"\r\n              icon=\"trash\"\r\n              onClick={() => props.deleteItem(item.key)}\r\n            />\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <FlipMove duration={300} easing=\"ease-in-out\">\r\n      {listItems}\r\n    </FlipMove>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ListItems from \"./component/ListItems.js\";\nimport Particles from \"react-particles-js\";\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 100\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\"\n      }\n    };\n    this.handelInput = this.handelInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n\n  handelInput = e => {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now()\n      }\n    });\n  };\n\n  addItem = e => {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if (newItem.text !== \"\") {\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: \"\",\n          key: \"\"\n        }\n      });\n    }\n  };\n\n  deleteItem = key => {\n    const filteredItems = this.state.items.filter(item => item.key !== key);\n    this.setState({\n      items: filteredItems\n    });\n  };\n\n  setUpdate = (text, key) => {\n    const items = this.state.items;\n    items.map(item => {\n      if (item.key === key) {\n        item.text = text;\n      }\n    });\n    this.setState({\n      items: items\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className=\"particles\" params={particlesOptions} />\n        <header>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter Task\"\n              value={this.state.currentItem.text}\n              onChange={this.handelInput}\n            />\n            <button type=\"submit\" className=\"fas fa-plus \"></button>\n          </form>\n        </header>\n        <ListItems\n          items={this.state.items}\n          deleteItem={this.deleteItem}\n          setUpdate={this.setUpdate}\n          finishItem={this.finishItem}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}